package com.training;
import javax.jcr.*;

import java.io.*;

import org.apache.jackrabbit.core.TransientRepository;

public class ThirdExample {

	public static void main(String[] args) {
	
		 Session session=null;
		try {
	        Repository repository = new TransientRepository(); 
            session = repository.login( 
            new SimpleCredentials("admin", "admin".toCharArray())); 
            	try { 
            			Node root = session.getRootNode(); 

                / 
            		//	if (!root.hasNode("importxml")) { 
            			//		System.out.print("Importing xml... "); 

                    // Create an unstructured node under which to import the XML 
                   // Node node = root.addNode("importxml", "nt:unstructured"); 

                  
                    //FileInputStream xml = new FileInputStream("bean.xml");
                    //session.importXML( 
                    //node.getPath(), xml, ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW); 
                    //xml.close();
                    //session.save(); 
                    System.out.println("done.");
                    dump(root);
                } 
            	}
                catch(Exception e ){
                	e.printStackTrace();
                }
	}
                
            
			}
	private static void dump(Node node) throws RepositoryException { 
        // First output the node path 
        System.out.println(node.getPath()); 
        // Skip the virtual (and large!) jcr:system subtree 
        if (node.getName().equals("jcr:system")) { 
            return; 
        } 
        
        PropertyIterator properties = node.getProperties(); 
        while (properties.hasNext()) { 
            Property property = properties.nextProperty(); 
            if (property.getDefinition().isMultiple()) { 
                
                Value[] values = property.getValues(); 
                for (int i = 0; i < values.length; i++) { 
                    System.out.println( 
                    property.getPath() + " = " + values[i] .getString()); 
                } 
            } else { 
                // A single-valued property 
                System.out.println( 
                property.getPath() + " = " + property.getString()); 
            } 
        } 
     // Finally output all the child nodes recursively 
        NodeIterator nodes = node.getNodes(); 
        while (nodes.hasNext()) { 
            dump(nodes.nextNode()); 
        } 
    } 
} 

