package com.training;
import javax.jcr.*;
import java.io.*;
import org.apache.jackrabbit.core.TransientRepository;

public class ThirdExample {

	public static void main(String[] args) {
	
		
		try {
	        Repository repository = new TransientRepository(); 
            Session session = repository.login( 
            new SimpleCredentials("admin", "admin".toCharArray())); 
            	try { 
            			Node root = session.getRootNode(); 

                // Import the XML file unless already imported 
            			if (!root.hasNode("importxml")) { 
            					System.out.print("Importing xml... "); 

                    // Create an unstructured node under which to import the XML 
                    Node node = root.addNode("importxml", "nt:unstructured"); 

                    // Import the file "test.xml" under the created node 
                    FileInputStream xml = new FileInputStream("bean.xml");
                    session.importXML( 
                    node.getPath(), xml, ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW); 
                    xml.close();
                    session.save(); 
                    System.out.println("done."); 
                } 
            	}
                catch(Exception e ){
                	
                }
                
               dump(root); 
            } finally { 
                session.logout(); 
            }
            
		
		

	}private static void dump(Node node) throws RepositoryException { 
        // First output the node path 
        System.out.println(node.getPath()); 
        // Skip the virtual (and large!) jcr:system subtree 
        if (node.getName().equals("jcr:system")) { 
            return; 
        } 
        
        PropertyIterator properties = node.getProperties(); 
        while (properties.hasNext()) { 
            Property property = properties.nextProperty(); 
            if (property.getDefinition().isMultiple()) { 
                // A multi-valued property, print all values 
                Value[] values = property.getValues(); 
                for (int i = 0; i < values.length; i++) { 
                    System.out.println( 
                    property.getPath() + " = " + values[i] .getString()); 
                } 
            } else { 
                // A single-valued property 
                System.out.println( 
                property.getPath() + " = " + property.getString()); 
            } 
        } 
     // Finally output all the child nodes recursively 
        NodeIterator nodes = node.getNodes(); 
        while (nodes.hasNext()) { 
            dump(nodes.nextNode()); 
        } 
    } 
} 
}
